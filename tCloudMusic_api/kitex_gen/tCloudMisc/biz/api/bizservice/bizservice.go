// Code generated by Kitex v0.4.4. DO NOT EDIT.

package bizservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "tCloudMusic_api/kitex_gen/tCloudMisc/biz/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return bizServiceServiceInfo
}

var bizServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BizService"
	handlerType := (*api.BizService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Login":  kitex.NewMethodInfo(loginHandler, newBizServiceLoginArgs, newBizServiceLoginResult, false),
		"Logout": kitex.NewMethodInfo(logoutHandler, newBizServiceLogoutArgs, newBizServiceLogoutResult, false),
		"SignUp": kitex.NewMethodInfo(signUpHandler, newBizServiceSignUpArgs, newBizServiceSignUpResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BizServiceLoginArgs)
	realResult := result.(*api.BizServiceLoginResult)
	success, err := handler.(api.BizService).Login(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceLoginArgs() interface{} {
	return api.NewBizServiceLoginArgs()
}

func newBizServiceLoginResult() interface{} {
	return api.NewBizServiceLoginResult()
}

func logoutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BizServiceLogoutArgs)
	realResult := result.(*api.BizServiceLogoutResult)
	success, err := handler.(api.BizService).Logout(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceLogoutArgs() interface{} {
	return api.NewBizServiceLogoutArgs()
}

func newBizServiceLogoutResult() interface{} {
	return api.NewBizServiceLogoutResult()
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BizServiceSignUpArgs)
	realResult := result.(*api.BizServiceSignUpResult)
	success, err := handler.(api.BizService).SignUp(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceSignUpArgs() interface{} {
	return api.NewBizServiceSignUpArgs()
}

func newBizServiceSignUpResult() interface{} {
	return api.NewBizServiceSignUpResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, request *api.LoginRequest) (r *api.LoginReponse, err error) {
	var _args api.BizServiceLoginArgs
	_args.Request = request
	var _result api.BizServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Logout(ctx context.Context, request *api.LogoutRequest) (r *api.LogoutResponse, err error) {
	var _args api.BizServiceLogoutArgs
	_args.Request = request
	var _result api.BizServiceLogoutResult
	if err = p.c.Call(ctx, "Logout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignUp(ctx context.Context, request *api.SignUpRequest) (r *api.SignUpResponse, err error) {
	var _args api.BizServiceSignUpArgs
	_args.Request = request
	var _result api.BizServiceSignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
